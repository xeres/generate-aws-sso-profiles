#!/bin/bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

PROGRAM_NAME="${0##*/}"
VERSION="1.0.0"

DELIM="-"
while getopts hvp:d: OPT "$@"; do
    case "$OPT" in
        p)
            AWS_PROFILE="$OPTARG"
            shift
            ;;
        d)
            DELIM="$OPTARG"
            shift
            ;;
        h)
            cat << __HELP__
Usage: $PROGRAM_NAME [OPTION]

Options:
    -p PROFILE     use a specific AWS SSO profile from your configuration file
    -d DELIM       use DELIM instead of "-" between an account name and a permission set
    -h             display this help and exit
    -v             output version information and exit
__HELP__
            exit 0
            ;;
        v)
            echo "$PROGRAM_NAME $VERSION"
            exit 0
            ;;
        :)
            exit 1
            ;;
        ?|*)
            exit 1
            ;;
    esac
done

export AWS_PROFILE

aws sts get-caller-identity > /dev/null
# A previous command will die with following messages, if nessesary:
# - Unable to locate credentials. You can configure credentials by running "aws configure".
# - The config profile ($AWS_PROFILE) could not be found
# - Error loading SSO Token: The SSO access token has either expired or is otherwise invalid.
# - The SSO session associated with this profile has expired or is otherwise invalid. To refresh this SSO session run aws sso login with the corresponding profile.
[ $? -ne 0 ] && exit 1

sso_start_url="$(aws configure get sso_start_url)"
if [ $? -ne 0 ]; then
    if [ -z "$sso_start_url" ]; then
        echo "The profile \"$AWS_PROFILE\" is configured to use SSO but is missing required configuration: sso_start_url" >&2
    else
        # should be dead already with:
        # - Error loading SSO Token: The SSO access token has either expired or is otherwise invalid.
        echo "ASSERT UNREACHABLE: 001" >&2
    fi

    exit 1
fi

sha1_hash="$(echo -n $sso_start_url | sha1sum)"
cache_file="$HOME/.aws/sso/cache/${sha1_hash%% *-}.json"

if [ ! -f "$cache_file" ]; then
    # should be dead already with:
    # - Error loading SSO Token: The SSO access token has either expired or is otherwise invalid.
    echo "ASSERT UNREACHABLE: 002" >&2
    exit 1
fi

cat << __EOF__
The following AWS SSO will be checked.

    $sso_start_url

__EOF__
read -p "Do you want to run the script? [y/N]: " YorN
[ "$YorN" = "Y" -o "$YorN" = "y" ] || exit 0

sso_access_token="$(jq -r .accessToken $cache_file)"
sso_region="$(jq -r .region $cache_file)"


ssoListAccounts="$(
    aws sso list-accounts \
        --region "$sso_region" \
        --access-token "$sso_access_token" \
        --query 'accountList[].[accountId, accountName]' \
        --output text | \
    sort -k 2    # order by account_name
)"

declare -A account_list
declare -a account_list_order

while read -r sso_account_id account_name; do
    account_list[$sso_account_id]="$account_name"
    account_list_order+=($sso_account_id)
done <<< "$ssoListAccounts"

profile_list=$(cat << __HEADER__
# This file was automatically generated by $PROGRAM_NAME $VERSION.
__HEADER__
)

for sso_account_id in ${account_list_order[@]}; do
    account_name="${account_list[$sso_account_id]}"
    echo
    echo "AWS account: $account_name ($sso_account_id) ..."

    ssoListAccountRoles="$(
        aws sso list-account-roles \
            --region "$sso_region" \
            --access-token "$sso_access_token" \
            --account-id "$sso_account_id" \
            --query 'roleList[].[roleName]' \
            --output text | \
        sort    # order by sso_role_name
    )"
    while read -r sso_role_name; do
        echo "    - $sso_role_name"
        profile=$(cat << __PROFILE__
[profile "$account_name$DELIM$sso_role_name"]
sso_start_url = $sso_start_url
sso_region = $sso_region
sso_account_id = $sso_account_id
sso_role_name = $sso_role_name
__PROFILE__
)
    done <<< "$ssoListAccountRoles"
    profile_list="$profile_list

$profile"
done

echo
read -p "Do you want to flush to ./aws_config? [y/N]: " YorN
[ "$YorN" = "Y" -o "$YorN" = "y" ] || exit 0

# backup old file
[ -f aws_config ] && mv -f aws_config aws_config~

# flush
cat <<< "$profile_list" > aws_config
